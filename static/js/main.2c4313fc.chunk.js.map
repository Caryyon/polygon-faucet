{"version":3,"sources":["logo.svg","LoadButton/index.js","AppExplanations/index.js","controller/accountManager.js","controller/faucet.js","App.js","reportWebVitals.js","index.js"],"names":["LoadButton","text","loadingText","color","disabled","hidden","onClick","useState","isLoading","setLoading","onTriggerRun","useCallback","then","className","style","margin","backgroundColor","display","AppExplanations","expandedItems","setexpandedItems","allowZeroExpanded","allowMultipleExpanded","onChange","update","length","newExpandedItemUUID","itemButtonBottom","document","getElementById","getBoundingClientRect","bottom","window","innerHeight","scrollBy","children","AccountManager","this","connected","busy","web3Provider","web3","balance","network","a","ethereum","request","method","params","account","console","error","Web3","eth","net","getId","log","decimals","balance_BN","utils","toBN","decimals_BN","before_comma","div","toString","after_comma","mod","padStart","formatted","getBalance","String","formatted_balance","getFormattedBalance","captcha","apiUrl","config","get","axios","response","status","data","hash","claimFaucet","set","configuration","accountManager","App","setAccount","setBalance","txLink","setTxLink","setCaptcha","hideProgressBar","src","logo","alt","connect","toast","Number","faucetClaim","success","catch","err","message","id","action","theme","sitekey","onVerify","token","ekey","target","rel","href","packageJson","version","h","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2c4313fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.57d8ffc7.svg\";","import React, { useState, useCallback } from \"react\";\nimport \"./index.css\";\n\nfunction LoadButton({ text, loadingText, color, disabled, hidden, onClick }) {\n  const [isLoading, setLoading] = useState(false);\n\n  const onTriggerRun = useCallback(() => {\n    setLoading(true);\n    onClick().then(() => {\n      setLoading(false);\n    });\n  }, [onClick]);\n\n  return (\n    <button\n      className=\"BackupButton\"\n      disabled={isLoading | disabled}\n      onClick={isLoading ? null : onTriggerRun}\n      style={{\n        margin: \"10px\",\n        backgroundColor: color,\n        display: hidden ? \"none\" : true,\n      }}\n    >\n      {isLoading ? loadingText || \"Loadingâ€¦\" : text}\n    </button>\n  );\n}\n\nexport default LoadButton;\n","import React, { useState } from \"react\";\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"./index.css\";\n\nexport default function AppExplanations() {\n  const [expandedItems, setexpandedItems] = useState([]);\n\n  // In case the user expands a node that is barely visible, we scroll the page to display it fully\n  function handleExpand(update) {\n    if (update.length > expandedItems.length) {\n      const newExpandedItemUUID = update[update.length - 1];\n      const itemButtonBottom = document\n        .getElementById(`accordion__panel-${newExpandedItemUUID}`)\n        .getBoundingClientRect().bottom;\n      if (itemButtonBottom > window.innerHeight) {\n        window.scrollBy(0, itemButtonBottom - window.innerHeight);\n      }\n    }\n    setexpandedItems(update);\n  }\n\n  const whatIsAFaucet_help =\n    // eslint-disable-next-line\n    \"A `Faucet` is a tool that provides a small amount of funds to start using a cryptocurrency without having to buy some. \\n\\\n    It's often a shity website with plenty of adds that will send you funds half the time, only after asking you to input your email to send you spam later.  \\n\\\n    `Polygon` had none for its mainnet, so here's one, without the crap you usually get on typical faucets\";\n\n\n  const howMuchCanIGet_help =\n    // eslint-disable-next-line\n    \"`Plenty enough!`  \\n\\\n    Transactions on Polygon network are dirt cheap. Forget Ethereum, forget BSC, we're talking about fractions of a cent for most transactions.  \\n\\\n    So this faucet will only send you `0.001 MATIC` - which is enough to deposit some fund on Aave and [earn fresh MATIC](https://medium.com/stakingbits/guide-to-yield-farming-with-aave-on-polygon-matic-network-a03bd2154275), for instance  \\n\\\n    With `0.001 MATIC`, you can do `100` basic transactions on Polygon network ! You can even deposit or withdraw funds on `Aave`, even though it is a pretty expensive transaction (`50$+` on Ethereum, `1$+` on Binance Smart Chain). \\n\\\n    The goal of this faucet is not to make you rich but just to make the onboarding to Polygon smoother.  \\n\\\n    You can use it up to 3 times a day, for the most clumsy of us ðŸ™„  \\n\\\n    Feel free to send some spare change at `0x8C5a6C767Ee7084a8C656Acd457Da9561163aE7E` to replenish the faucet once you're rich ðŸ¦„\";\n\n  const howToEarnMoreMatic_help =\n    \"* First bring your assets from Ethereum to Polygon through [the bridge](https://wallet.matic.network/bridge/)  \\n\\\n    Then there's a variety of things you can do:  \\n\\\n    * Swapping assets on [QuickSwap](https://quickswap.exchange/) or [ComethSwap](https://swap.cometh.io/#/swap), the equivalents of `Uniswap` on Polygon  \\n\\\n    [Paraswap](https://paraswap.io/#/?network=polygon) is also available and will route your swaps through the cheapest path.  \\n\\\n    * Depositing your assets on [Aave](https://app.aave.com/dashboard) or [Curve](https://polygon.curve.fi/) to farm some fresh MATIC  \\n\\\n    * Enjoy the same functionalities Ethereum has, only with less friction ðŸ¦„  \\n\\\n    \";\n\n  return (\n    <Accordion allowZeroExpanded allowMultipleExpanded onChange={handleExpand}>\n       <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>What is a Faucet ?</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={whatIsAFaucet_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>How much can I get ?</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={howMuchCanIGet_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>\n            How to earn (much) more MATIC ?\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={howToEarnMoreMatic_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n","import Web3 from \"web3\";\n\nconst MATIC_NETWORK = 137;\n\nclass AccountManager {\n  constructor() {\n    this.connected = false;\n    this.busy = false;\n    this.web3Provider = null;\n    this.web3 = null;\n    this.balance = 0;\n    this.network = 0;\n  }\n\n  async connect() {\n    if (!this.connected) {\n      if (window.ethereum) {\n        this.web3Provider = window.ethereum;\n        try {\n          // Request account access\n          this.account = await this.web3Provider.request({\n            method: \"eth_requestAccounts\",\n            params: [],\n          });\n        } catch (error) {\n          // User denied account access...\n          console.error(`User denied account access: ${error}`);\n        }\n        this.web3 = new Web3(this.web3Provider);\n        this.network = await this.web3.eth.net.getId();\n        if(this.network == MATIC_NETWORK){\n          this.connected = true;\n          console.log(`connected: ${this.account} ${typeof this.account}`);\n          return this.account;\n        }\n      }\n    }\n  }\n\n  getFormattedBalance(balance, decimals){\n    let balance_BN = this.web3.utils.toBN(balance);\n    let decimals_BN = this.web3.utils.toBN(10**decimals);\n    let before_comma = balance_BN.div(decimals_BN).toString();\n    let after_comma = balance_BN.mod(decimals_BN).toString();\n    after_comma = after_comma.padStart(decimals, \"0\");\n    return before_comma + \".\" + after_comma + \" MATIC\";\n  }\n\n  async getBalance(formatted = true) {\n    const decimals = 18;\n    this.balance = await this.web3.eth.getBalance(String(this.account));\n    this.formatted_balance = this.getFormattedBalance(this.balance, decimals);\n    return formatted ? this.formatted_balance : this.balance;\n  }\n\n}\n\nexport default AccountManager;\n","import axios from \"axios\";\nimport config from \"react-global-configuration\";\n\nasync function claimFaucet(account, captcha){\n    console.log(captcha)\n    let apiUrl = config.get(\"apiurl\") +\"/rpc-mainnet/matic/\" + account + \"/\" + captcha;\n    console.log(\"Sending request...\")\n    return await axios\n    .get(apiUrl)\n    .then(response => {\n        if (response.status === 200) {\n        return config.get(\"explorer\") + \"/tx/\" + response.data.hash;\n        }\n    });\n}\n\nexport default claimFaucet;\n","import logo from './logo.svg';\nimport './App.css';\nimport packageJson from \"../package.json\";\nimport LoadButton from \"./LoadButton\";\nimport AppExplanations from \"./AppExplanations\";\nimport AccountManager from \"./controller/accountManager\";\nimport faucetClaim from \"./controller/faucet\";\nimport React, { useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport config from \"react-global-configuration\";\nimport configuration from './config.json';\nimport HCaptcha from '@hcaptcha/react-hcaptcha';\n\nconfig.set(configuration);\n\nconst accountManager = new AccountManager();\n\nfunction App() {\n  const [account, setAccount] = useState(\"Not connected\");\n  const [balance, setBalance] = useState(0);\n  const [txLink, setTxLink] = useState(\"\");\n  const [captcha, setCaptcha] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <ToastContainer hideProgressBar={true} />\n      <div className=\"App-banner\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p className=\"App-title\">Polygon Faucet</p>\n        </div>\n      <header className=\"App-header\">\n      <div className=\"Commands\">\n        <LoadButton\n          text=\"Connect\"\n          loadingText=\"Loading...\"\n          color=\"#8248e5\"\n          hidden={account !== \"Not connected\"}\n          onClick={() => accountManager.connect().then((account) => {\n            if(!account){\n              toast.error(`Wrong network: Please select Matic/Polygon network first`)\n            }\n            else{\n              setAccount(account);\n              accountManager.getBalance().then((balance) => {setBalance(balance)});\n            }\n          })}\n        />\n        <LoadButton\n          text={Number(balance) >= config.get(\"maxAmount\") ? \"Balance too high\" : \"Receive\"}\n          loadingText=\"Sending...\"\n          color=\"#8248e5\"\n          disabled={Number(balance) >= config.get(\"maxAmount\") || captcha === \"\"}\n          hidden={account === \"Not connected\"}\n          onClick={() => faucetClaim(account, captcha)\n            .then((hash) => {\n              toast.success(\"Transaction sent!\");\n              setTxLink(hash);\n              setBalance(accountManager.getFormattedBalance(Number(accountManager.balance+config.get(\"maxAmount\")), 18));\n              setCaptcha(\"\");\n            })\n            .catch((error) => {\n              toast.error(`${error.response.data.err.message} ðŸ™…`)})\n          }\n        />\n      </div>\n      <form id=\"receive\" action=\"\" method=\"POST\">\n        <HCaptcha\n          theme=\"dark\"\n          sitekey={config.get(\"hcaptchasitekey\")}\n          onVerify={(token,ekey) => {setCaptcha(token)}}\n        />\n      </form>\n      <p hidden={account === \"Not connected\"}>{account}</p>\n      <p hidden={account === \"Not connected\"}>{\"Your balance: \" + String(balance)}</p>\n      <a hidden={txLink === \"\"} target=\"_blank\" rel=\"noopener noreferrer\" href={txLink}>{txLink}</a>\n      <br></br>\n      <AppExplanations></AppExplanations>\n      <div className=\"App-footer\">\n        <p>\n          A modest Web App built by <a href=\"https://github.com/TamtamHero\" target=\"_blank\" rel=\"noopener noreferrer\">TamtamHero</a> with React, hosted on Github. v\n          {`${packageJson.version}`}.{\" \"}\n          <a href=\"https://github.com/TamtamHero/polygon-faucet/\">\n            PRs welcomed and appreciated âœ¨\n          </a>\n        </p>\n        <p>\n          Ethereum/Polygon donation: <a h href=\"https://explorer-mainnet.maticvigil.com/address/0x97d5CeBb87cBeB641c0C17C2d4d29339CDCF91D2/transactions\" target=\"_blanc\" rel=\"noopener noreferrer\">0x97d5CeBb87cBeB641c0C17C2d4d29339CDCF91D2</a>\n        </p>\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}